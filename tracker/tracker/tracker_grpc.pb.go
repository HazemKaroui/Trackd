// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: tracker.proto

package tracker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrackerServiceClient is the client API for TrackerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackerServiceClient interface {
	CreateTracked(ctx context.Context, in *CreateTrackedRequest, opts ...grpc.CallOption) (*CreateTrackedResponse, error)
	GetTrackeds(ctx context.Context, in *GetTrackedsRequest, opts ...grpc.CallOption) (*GetTrackedsResponse, error)
	UpdateTracked(ctx context.Context, in *UpdateTrackedRequest, opts ...grpc.CallOption) (*UpdateTrackedResponse, error)
	DeleteTracked(ctx context.Context, in *DeleteTrackedRequest, opts ...grpc.CallOption) (*DeleteTrackedResponse, error)
}

type trackerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackerServiceClient(cc grpc.ClientConnInterface) TrackerServiceClient {
	return &trackerServiceClient{cc}
}

func (c *trackerServiceClient) CreateTracked(ctx context.Context, in *CreateTrackedRequest, opts ...grpc.CallOption) (*CreateTrackedResponse, error) {
	out := new(CreateTrackedResponse)
	err := c.cc.Invoke(ctx, "/tracker.TrackerService/CreateTracked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerServiceClient) GetTrackeds(ctx context.Context, in *GetTrackedsRequest, opts ...grpc.CallOption) (*GetTrackedsResponse, error) {
	out := new(GetTrackedsResponse)
	err := c.cc.Invoke(ctx, "/tracker.TrackerService/GetTrackeds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerServiceClient) UpdateTracked(ctx context.Context, in *UpdateTrackedRequest, opts ...grpc.CallOption) (*UpdateTrackedResponse, error) {
	out := new(UpdateTrackedResponse)
	err := c.cc.Invoke(ctx, "/tracker.TrackerService/UpdateTracked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerServiceClient) DeleteTracked(ctx context.Context, in *DeleteTrackedRequest, opts ...grpc.CallOption) (*DeleteTrackedResponse, error) {
	out := new(DeleteTrackedResponse)
	err := c.cc.Invoke(ctx, "/tracker.TrackerService/DeleteTracked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackerServiceServer is the server API for TrackerService service.
// All implementations must embed UnimplementedTrackerServiceServer
// for forward compatibility
type TrackerServiceServer interface {
	CreateTracked(context.Context, *CreateTrackedRequest) (*CreateTrackedResponse, error)
	GetTrackeds(context.Context, *GetTrackedsRequest) (*GetTrackedsResponse, error)
	UpdateTracked(context.Context, *UpdateTrackedRequest) (*UpdateTrackedResponse, error)
	DeleteTracked(context.Context, *DeleteTrackedRequest) (*DeleteTrackedResponse, error)
	mustEmbedUnimplementedTrackerServiceServer()
}

// UnimplementedTrackerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrackerServiceServer struct {
}

func (UnimplementedTrackerServiceServer) CreateTracked(context.Context, *CreateTrackedRequest) (*CreateTrackedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTracked not implemented")
}
func (UnimplementedTrackerServiceServer) GetTrackeds(context.Context, *GetTrackedsRequest) (*GetTrackedsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrackeds not implemented")
}
func (UnimplementedTrackerServiceServer) UpdateTracked(context.Context, *UpdateTrackedRequest) (*UpdateTrackedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTracked not implemented")
}
func (UnimplementedTrackerServiceServer) DeleteTracked(context.Context, *DeleteTrackedRequest) (*DeleteTrackedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTracked not implemented")
}
func (UnimplementedTrackerServiceServer) mustEmbedUnimplementedTrackerServiceServer() {}

// UnsafeTrackerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackerServiceServer will
// result in compilation errors.
type UnsafeTrackerServiceServer interface {
	mustEmbedUnimplementedTrackerServiceServer()
}

func RegisterTrackerServiceServer(s grpc.ServiceRegistrar, srv TrackerServiceServer) {
	s.RegisterService(&TrackerService_ServiceDesc, srv)
}

func _TrackerService_CreateTracked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTrackedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServiceServer).CreateTracked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracker.TrackerService/CreateTracked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServiceServer).CreateTracked(ctx, req.(*CreateTrackedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackerService_GetTrackeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrackedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServiceServer).GetTrackeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracker.TrackerService/GetTrackeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServiceServer).GetTrackeds(ctx, req.(*GetTrackedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackerService_UpdateTracked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTrackedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServiceServer).UpdateTracked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracker.TrackerService/UpdateTracked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServiceServer).UpdateTracked(ctx, req.(*UpdateTrackedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackerService_DeleteTracked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTrackedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServiceServer).DeleteTracked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracker.TrackerService/DeleteTracked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServiceServer).DeleteTracked(ctx, req.(*DeleteTrackedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrackerService_ServiceDesc is the grpc.ServiceDesc for TrackerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrackerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tracker.TrackerService",
	HandlerType: (*TrackerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTracked",
			Handler:    _TrackerService_CreateTracked_Handler,
		},
		{
			MethodName: "GetTrackeds",
			Handler:    _TrackerService_GetTrackeds_Handler,
		},
		{
			MethodName: "UpdateTracked",
			Handler:    _TrackerService_UpdateTracked_Handler,
		},
		{
			MethodName: "DeleteTracked",
			Handler:    _TrackerService_DeleteTracked_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tracker.proto",
}
